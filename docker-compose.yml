version: '3.8'

services:
  aleen-ia:
    build: .
    container_name: aleen-ia-app
    hostname: aleen-ia
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - PYTHON_AI_URL=https://ai-aleen.live.claudy.host
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - EVOLUTION_API_KEY=${EVOLUTION_API_KEY}
      - EVOLUTION_API_BASE_URL=${EVOLUTION_API_BASE_URL}
      - EVOLUTION_INSTANCE=${EVOLUTION_INSTANCE}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/webhook/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app_network

  redis:
    image: redis:7-alpine
    container_name: redis-server
    hostname: redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      app_network:
        aliases:
          - redis-server

volumes:
  redis_data: {}

networks:
  app_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: "1500"
